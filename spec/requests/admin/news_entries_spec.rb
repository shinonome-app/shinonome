# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/admin/news_entries', type: :request do
  # NewsEntry. As you add validations to NewsEntry, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      title: 'テスト',
      body: 'テストです',
      flag: true,
      published_on: Time.zone.parse('2021-05-04')
    }
  end

  let(:invalid_attributes) do
    {
      title: nil,
      body: 'テストです',
      flag: true,
      published_on: Time.zone.parse('2021-05-04')
    }
  end

  let(:user) { create(:user) }

  describe 'GET /admin/news_entries/' do
    before { sign_in(user) }

    it 'renders a successful response' do
      NewsEntry.create! valid_attributes
      get admin_news_entries_url
      expect(response).to be_successful
    end
  end

  describe 'GET /admin/news_entries/show' do
    before { sign_in(user) }

    it 'renders a successful response' do
      news_entry = NewsEntry.create! valid_attributes
      get admin_news_entry_url(news_entry)
      expect(response).to be_successful
    end
  end

  describe 'GET /admin/news_entries/new' do
    before { sign_in(user) }

    it 'renders a successful response' do
      get new_admin_news_entry_url
      expect(response).to be_successful
    end
  end

  describe 'GET /admin/news_entries/edit' do
    before { sign_in(user) }

    it 'render a successful response' do
      news_entry = NewsEntry.create! valid_attributes
      get edit_admin_news_entry_url(news_entry)
      expect(response).to be_successful
    end
  end

  describe 'POST /admin/news_entries/create' do
    before { sign_in user }

    context 'with valid parameters' do
      it 'creates a new NewsEntry' do
        expect do
          post admin_news_entries_url, params: { news_entry: valid_attributes }
        end.to change(NewsEntry, :count).by(1)
      end

      it 'redirects to the created news entry' do
        post admin_news_entries_url, params: { news_entry: valid_attributes }
        expect(response).to redirect_to(admin_news_entry_url(NewsEntry.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new NewsEntry' do
        expect do
          post admin_news_entries_url, params: { news_entry: invalid_attributes }
        end.to change(NewsEntry, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post admin_news_entries_url, params: { news_entry: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'PATCH /update' do
    before { sign_in user }

    context 'with valid parameters' do
      let(:new_attributes) do
        {
          title: 'テスト2',
          body: 'テスト2です',
          flag: true,
          published_on: Time.zone.parse('2021-05-04')
        }
      end

      it 'updates the requested news entry' do
        news_entry = NewsEntry.create! valid_attributes
        patch admin_news_entry_url(news_entry), params: { news_entry: new_attributes }
        news_entry.reload
        expect(news_entry.title).to eq 'テスト2'
      end

      it 'redirects to the news entry' do
        news_entry = NewsEntry.create! valid_attributes
        patch admin_news_entry_url(news_entry), params: { news_entry: new_attributes }
        news_entry.reload
        expect(response).to redirect_to(admin_news_entry_url(news_entry))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        news_entry = NewsEntry.create! valid_attributes
        patch admin_news_entry_url(news_entry), params: { news_entry: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'DELETE /destroy' do
    before { sign_in user }

    it 'destroys the requested news entry' do
      news_entry = NewsEntry.create! valid_attributes
      expect do
        delete admin_news_entry_url(news_entry)
      end.to change(NewsEntry, :count).by(-1)
    end

    it 'redirects to the news entry list' do
      news_entry = NewsEntry.create! valid_attributes
      delete admin_news_entry_url(news_entry)
      expect(response).to redirect_to(admin_news_entries_url)
    end
  end
end
