# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/admin/sites' do
  let(:valid_attributes) do
    {
      name: '関連サイト',
      url: 'https://shinonome.example.com/sites/1',
      updated_by: user.id,
      site_secret_attributes: {
        owner_name: '運営者',
        email: 'shinonome-site@example.com',
        memo: '備考'
      }
    }
  end

  let(:invalid_attributes) do
    { name: 'foo' }
  end

  let(:user) { create(:user) }

  before do
    sign_in user
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      get '/admin/sites'
      expect(response).to have_http_status(:ok)
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    let(:site) { create(:site, updated_by: user.id) }

    it 'renders a successful response' do
      get admin_site_url(site)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_admin_site_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    let(:site) { create(:site, updated_by: user.id) }

    it 'render a successful response' do
      get edit_admin_site_url(site)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Site' do
        expect do
          post admin_sites_url, params: { site: valid_attributes }
        end.to change(Site, :count).by(1)
      end

      it 'redirects to the created site' do
        post admin_sites_url, params: { site: valid_attributes }
        expect(response).to redirect_to(admin_site_url(Site.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Site' do
        expect do
          post admin_sites_url, params: { site: invalid_attributes }
        end.not_to change(Site, :count)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post admin_sites_url, params: { site: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          name: '関連サイト2',
          url: 'https://shinonome.example.com/sites/2'
        }
      end

      it 'updates the requested site' do
        site = Site.create! valid_attributes
        patch admin_site_url(site), params: { site: new_attributes }
        site.reload
        expect(site.name).to eq '関連サイト2'
        expect(site.url).to eq 'https://shinonome.example.com/sites/2'
        expect(site.site_secret&.owner_name).to eq '運営者'
        expect(site.site_secret&.email).to eq 'shinonome-site@example.com'
      end

      it 'redirects to the site' do
        site = Site.create! valid_attributes
        patch admin_site_url(site), params: { site: new_attributes }
        site.reload
        expect(response).to redirect_to(admin_site_url(site))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        site = Site.create! valid_attributes
        patch admin_site_url(site), params: { site: invalid_attributes }
        expect(response).to have_http_status(:found)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested site' do
      site = Site.create! valid_attributes
      expect do
        delete admin_site_url(site)
      end.to change(Site, :count).by(-1)
    end

    it 'redirects to the sites list' do
      site = Site.create! valid_attributes
      delete admin_site_url(site)
      expect(response).to redirect_to(admin_sites_url)
    end
  end
end
