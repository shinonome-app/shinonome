# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/original_books', type: :request do
  # OriginalBook. As you add validations to OriginalBook, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      title: '底本名',
      publisher: '底本社',
      first_pubdate: '1998（平成10）年2月3日',
      input_edition: '1998（平成10）年2月3日第1刷',
      worktype_id: worktype.id,
      work_id: work.id,
      note: '備考'
    }
  end

  let(:invalid_attributes) do
    {
      title: nil
    }
  end

  let(:work) { create(:work) }
  let(:user) { create(:user) }
  let(:worktype) { Worktype.first }

  before { sign_in(user) }

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_admin_work_original_book_url(work)
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'render a successful response' do
      original_book = OriginalBook.create! valid_attributes
      get edit_admin_work_original_book_url(work, original_book)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new OriginalBook' do
        expect do
          post admin_work_original_books_url(work), params: { original_book: valid_attributes }
        end.to change(OriginalBook, :count).by(1)
      end

      it 'redirects to the created original_book' do
        post admin_work_original_books_url(work), params: { original_book: valid_attributes }
        expect(response).to redirect_to(admin_work_url(work))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new OriginalBook' do
        expect do
          post admin_work_original_books_url(work), params: { original_book: invalid_attributes }
        end.not_to change(OriginalBook, :count)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post admin_work_original_books_url(work), params: { original_book: invalid_attributes }
        expect(response.status).to eq 422
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          title: '底本名2'
        }
      end

      it 'updates the requested original_book' do
        original_book = OriginalBook.create! valid_attributes
        patch admin_work_original_book_url(work, original_book), params: { original_book: new_attributes }
        original_book.reload
        expect(original_book.title).to eq '底本名2'
      end

      it 'redirects to the original_book' do
        original_book = OriginalBook.create! valid_attributes
        patch admin_work_original_book_url(work, original_book), params: { original_book: new_attributes }
        original_book.reload
        expect(response).to redirect_to(admin_work_url(work))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        original_book = OriginalBook.create! valid_attributes
        patch admin_work_original_book_url(work, original_book), params: { original_book: invalid_attributes }
        expect(response.status).to eq 422
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested original_book' do
      original_book = OriginalBook.create! valid_attributes
      expect do
        delete admin_work_original_book_url(work, original_book)
      end.to change(OriginalBook, :count).by(-1)
    end

    it 'redirects to the original_books list' do
      original_book = OriginalBook.create! valid_attributes
      delete admin_work_original_book_url(work, original_book)
      expect(response).to redirect_to(admin_work_url(work))
    end
  end
end
