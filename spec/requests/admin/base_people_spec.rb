# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/base_people', type: :request do
  # BasePerson. As you add validations to BasePerson, be sure to
  # adjust the attributes here as well.
  let!(:person) { create(:person) }
  let!(:original_person) { create(:person) }

  let(:valid_attributes) { { original_person_id: original_person.id, person_id: person.id } }
  let(:invalid_attributes) { { person_id: 'foo' } }

  let(:user) { create(:user) }

  before do
    sign_in user
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      base_person = BasePerson.create!({ original_person_id: original_person.id, person_id: person.id })
      get admin_person_url(person)
      expect(response).to be_successful
      expect(response.body).to include(original_person.name)
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_admin_person_base_person_url(person)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new BasePerson' do
        expect do
          post admin_person_base_people_url(person), params: { original_person_id: original_person.id }
        end.to change(BasePerson, :count).by(1)
      end

      it 'redirects to the created base_person' do
        post admin_person_base_people_url(person), params: { original_person_id: original_person.id }
        expect(response).to redirect_to(admin_person_url(BasePerson.last.person))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new BasePerson' do
        expect do
          post admin_person_base_people_url(person), params: { original_person_id: -123 }
        end.not_to change(BasePerson, :count)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post admin_person_base_people_url(person), params: { original_person_id: -123 }
        expect(response).to have_http_status(302)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested base_person' do
      base_person = BasePerson.create! valid_attributes
      expect do
        delete admin_person_base_person_url(person, base_person)
      end.to change(BasePerson, :count).by(-1)
    end

    it 'redirects to the base_people list' do
      base_person = BasePerson.create! valid_attributes
      delete admin_person_base_person_url(person, base_person)
      expect(response).to redirect_to(admin_person_url(person))
    end
  end
end
