# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/admin/books', type: :request do
  # Book. As you add validations to Book, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      title: 'テスト',
      title_kana: 'てすと',
      copyright_flag: false,
      started_on: Time.zone.parse('2021-05-06'),
      book_status_id: book_status.id,
      note: '備考1',
      user_id: user.id,
      kana_type_id: kana_type.id
    }
  end

  let(:invalid_attributes) do
    {
      title: nil,
      title_kana: 'てすと',
      copyright_flag: false,
      started_on: Time.zone.parse('2021-05-06'),
      book_status_id: 1,
      note: '備考1'
    }
  end

  let(:user) { create(:user, email: 'user2@example.com', username: 'user2') }
  let(:kana_type) { create(:kana_type) }
  let(:book_status) { create(:book_status) }
  before { sign_in(user) }

  describe 'GET /admin/books' do
    let(:book) { create(:book) }

    it 'renders a successful response' do
      get admin_books_url
      expect(response).to be_successful
    end
  end

  describe 'GET /admin/books/show' do
    let(:book) { create(:book) }

    it 'renders a successful response' do
      get admin_book_url(book)
      expect(response).to be_successful
    end
  end

  describe 'GET /admin/books/new' do
    it 'renders a successful response' do
      get new_admin_book_url
      expect(response).to be_successful
    end
  end

  describe 'GET /admin/books/edit' do
    let(:book) { create(:book) }

    it 'render a successful response' do
      get edit_admin_book_url(book)
      expect(response).to be_successful
    end
  end

  describe 'POST /adin/books/create' do
    let!(:book) { create(:book) }

    context 'with valid parameters' do
      it 'creates a new Book' do
        expect do
          post admin_books_url, params: { book: valid_attributes }
        end.to change(Book, :count).by(1)
      end

      it 'redirects to the created book' do
        post admin_books_url, params: { book: valid_attributes }
        expect(response).to redirect_to(admin_book_url(Book.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Book' do
        expect do
          post admin_books_url, params: { book: invalid_attributes }
        end.to change(Book, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post admin_books_url, params: { book: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'PATCH /admin/books/update' do
    let!(:book) { create(:book) }

    context 'with valid parameters' do
      let(:new_attributes) do
        {
          title: 'テスト2',
          title_kana: 'てすとに',
          copyright_flag: false,
          started_on: Time.zone.parse('2021-05-06'),
          book_status_id: book_status.id,
          note: '備考2',
          user_id: user.id,
          kana_type_id: kana_type.id
        }
      end

      it 'updates the requested book' do
        patch admin_book_url(book), params: { book: new_attributes }
        book.reload
        expect(book.title).to eq 'テスト2'
      end

      it 'redirects to the book' do
        patch admin_book_url(book), params: { book: new_attributes }
        book.reload
        expect(response).to redirect_to(admin_book_url(book))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        patch admin_book_url(book), params: { book: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'DELETE /admin/books/destroy' do
    let!(:book) { create(:book) }

    it 'destroys the requested book' do
      expect do
        delete admin_book_url(book)
      end.to change(Book, :count).by(-1)
    end

    it 'redirects to the books list' do
      delete admin_book_url(book)
      expect(response).to redirect_to(admin_books_url)
    end
  end
end
