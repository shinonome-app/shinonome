require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/kana_types', type: :request do
  # KanaType. As you add validations to KanaType, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    skip('Add a hash of attributes valid for your model')
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      KanaType.create! valid_attributes
      get kana_types_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      kana_type = KanaType.create! valid_attributes
      get kana_type_url(kana_type)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_kana_type_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'render a successful response' do
      kana_type = KanaType.create! valid_attributes
      get edit_kana_type_url(kana_type)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new KanaType' do
        expect do
          post kana_types_url, params: { kana_type: valid_attributes }
        end.to change(KanaType, :count).by(1)
      end

      it 'redirects to the created kana_type' do
        post kana_types_url, params: { kana_type: valid_attributes }
        expect(response).to redirect_to(kana_type_url(KanaType.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new KanaType' do
        expect do
          post kana_types_url, params: { kana_type: invalid_attributes }
        end.to change(KanaType, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post kana_types_url, params: { kana_type: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested kana_type' do
        kana_type = KanaType.create! valid_attributes
        patch kana_type_url(kana_type), params: { kana_type: new_attributes }
        kana_type.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the kana_type' do
        kana_type = KanaType.create! valid_attributes
        patch kana_type_url(kana_type), params: { kana_type: new_attributes }
        kana_type.reload
        expect(response).to redirect_to(kana_type_url(kana_type))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        kana_type = KanaType.create! valid_attributes
        patch kana_type_url(kana_type), params: { kana_type: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested kana_type' do
      kana_type = KanaType.create! valid_attributes
      expect do
        delete kana_type_url(kana_type)
      end.to change(KanaType, :count).by(-1)
    end

    it 'redirects to the kana_types list' do
      kana_type = KanaType.create! valid_attributes
      delete kana_type_url(kana_type)
      expect(response).to redirect_to(kana_types_url)
    end
  end
end
