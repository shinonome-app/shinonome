# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe ProofreadsController do
  # Proofread. As you add validations to Proofread, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    skip('Add a hash of attributes valid for your model')
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Proofread.create! valid_attributes
      get proofreads_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      proofread = Proofread.create! valid_attributes
      get proofread_url(proofread)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    let(:work) { create(:work, :with_person, :teihon) }

    context 'paramsがない場合' do
      it 'renders a error response' do
        get new_proofread_url
        expect(response).to have_http_status :bad_request
        expect(response.body).to include('ActionController::ParameterMissing')
      end
    end

    context '正しいparamsがある場合' do
      # http://localhost:3000/proofreads/new?proofread_form[sub_works_attributes][0][work_id]=4885&proofread_form[sub_works_attributes][0][enabled]=0&proofread_form[sub_works_attributes][0][enabled]=1&proofread_form[person_id]=380
      it 'renders a successful response' do
        valid_params = {
          proofread_form: {
            sub_works_attributes: {
              '0': { work_id: work.id, enabled: 1 }
            },
            person_id: work.people[0].id
          }
        }

        get new_proofread_url(valid_params)
        expect(response).to have_http_status :ok
      end
    end
  end

  describe 'GET /edit' do
    xit 'render a successful response' do
      proofread = Proofread.create! valid_attributes
      get edit_proofread_url(proofread)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      xit 'creates a new Proofread' do
        expect do
          post proofreads_url, params: { proofread: valid_attributes }
        end.to change(Proofread, :count).by(1)
      end

      xit 'redirects to the created proofread' do
        post proofreads_url, params: { proofread: valid_attributes }
        expect(response).to redirect_to(proofread_url(Proofread.last))
      end
    end

    context 'with invalid parameters' do
      xit 'does not create a new Proofread' do
        expect do
          post proofreads_url, params: { proofread: invalid_attributes }
        end.not_to change(Proofread, :count)
      end

      xit "renders a successful response (i.e. to display the 'new' template)" do
        post proofreads_url, params: { proofread: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      xit 'updates the requested proofread' do
        proofread = Proofread.create! valid_attributes
        patch proofread_url(proofread), params: { proofread: new_attributes }
        proofread.reload
        skip('Add assertions for updated state')
      end

      xit 'redirects to the proofread' do
        proofread = Proofread.create! valid_attributes
        patch proofread_url(proofread), params: { proofread: new_attributes }
        proofread.reload
        expect(response).to redirect_to(proofread_url(proofread))
      end
    end

    context 'with invalid parameters' do
      xit "renders a successful response (i.e. to display the 'edit' template)" do
        proofread = Proofread.create! valid_attributes
        patch proofread_url(proofread), params: { proofread: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'DELETE /destroy' do
    xit 'destroys the requested proofread' do
      proofread = Proofread.create! valid_attributes
      expect do
        delete proofread_url(proofread)
      end.to change(Proofread, :count).by(-1)
    end

    xit 'redirects to the proofreads list' do
      proofread = Proofread.create! valid_attributes
      delete proofread_url(proofread)
      expect(response).to redirect_to(proofreads_url)
    end
  end
end
