# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/sites', type: :request do
  # Site. As you add validations to Site, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    skip('Add a hash of attributes valid for your model')
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  describe 'GET /index' do
    xit 'renders a successful response' do
      Site.create! valid_attributes
      get sites_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    xit 'renders a successful response' do
      site = Site.create! valid_attributes
      get site_url(site)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    xit 'renders a successful response' do
      get new_site_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    xit 'render a successful response' do
      site = Site.create! valid_attributes
      get edit_site_url(site)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      xit 'creates a new Site' do
        expect do
          post sites_url, params: { site: valid_attributes }
        end.to change(Site, :count).by(1)
      end

      xit 'redirects to the created site' do
        post sites_url, params: { site: valid_attributes }
        expect(response).to redirect_to(site_url(Site.last))
      end
    end

    context 'with invalid parameters' do
      xit 'does not create a new Site' do
        expect do
          post sites_url, params: { site: invalid_attributes }
        end.to change(Site, :count).by(0)
      end

      xit "renders a successful response (i.e. to display the 'new' template)" do
        post sites_url, params: { site: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      xit 'updates the requested site' do
        site = Site.create! valid_attributes
        patch site_url(site), params: { site: new_attributes }
        site.reload
        skip('Add assertions for updated state')
      end

      xit 'redirects to the site' do
        site = Site.create! valid_attributes
        patch site_url(site), params: { site: new_attributes }
        site.reload
        expect(response).to redirect_to(site_url(site))
      end
    end

    context 'with invalid parameters' do
      xit "renders a successful response (i.e. to display the 'edit' template)" do
        site = Site.create! valid_attributes
        patch site_url(site), params: { site: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe 'DELETE /destroy' do
    xit 'destroys the requested site' do
      site = Site.create! valid_attributes
      expect do
        delete site_url(site)
      end.to change(Site, :count).by(-1)
    end

    xit 'redirects to the sites list' do
      site = Site.create! valid_attributes
      delete site_url(site)
      expect(response).to redirect_to(sites_url)
    end
  end
end
